Framework : 웹 애플리케이션을 빠르게 개발할 수 있도록 도와주는 도구(개발에 필요한 기본 구조, 규칙, 라이브러리 등을 제공)

Client(클라이언트) : 서비스를 요청하는 주체(웹 사용자의 인터넷이 연결된 장치, 웹 브라우저)

Server(서버) : 클라이언트의 요청에 응답하는 주체(웹 페이지, 앱을 저장하는 컴퓨터)

가상 환경 : Python 애플리케이션과 그에 따른 패키지들을 격리하여 관리할 수 있는 독립적인 실행 환경

가상환경 venv 생성
python -m venv venv
	     (이름)

가상환경 활성화
source venv/Scripts/activate

의존성 패키지 목록 생성
pip freeze > requirements.txt

Django 프로젝트 생성
django-admin startproject firstpjt .

Django 서버 실행
python manage.py runserver

가상환경을 사용하는 이유
 - 의존성 관리 : 라이브러리 및 패키지를 각 프로젝트마다 독립적으로 사용가능
 - 팀 프로젝트 협업 : 모든 팀원이 동일한 환경과 의존성 위에서 작업하여 버전 간 충돌을 방지

LTS(Long-Term Support)
1. 프레임워크나 라이브러리 등의 소프트웨어에서 장기간 지원되는 안정적인 버전을 의미할 때 사용
2. 기업이나 대규모 프로젝트에서는 소프트웨어 업그레이드에 많은 비용과 시간이 필요하기 때문에 안정적이고 장기간 지원되는 버전이 필요


Django project : 애플리케이션의 집합(DB 설정, URL 연결, 전체 앱 설정 등을 처리)

Django application : 독립적으로 작동하는 기능 단위 모듈(각자 특정한 기능을 담당하며 다른 앱들과 함께 하나의 프로젝트를 구성)

앱 생성
python manage.py startapp articles

앱 등록
settings.py의 INSTALLED_APPS 리스트에 추가(반드시 앱을 생성한 후에 등록)


디자인 패턴 : 소프트웨어 설계에서 발생하는 문제를 해결하기 위한 일반적인 해결책(공통적인 문제를 해결하는데 쓰이는 형식화 된 관행)

MVC 디자인 패턴(Model, View, Controller) : 애플리케이션을 구조화하는 대표적인 패턴(데이터, 사용자 인터페이스, 비즈니스 로직을 분리)

MTV 디자인 패턴(Model, Template, View) : Django에서 애플리케이션을 구조화하는 패턴(기존 MVC 패턴과 동일하나 명칭을 다르게 정의한 것)


프로젝트 구조
 - settings.py : 프로젝트의 모든 설정을 관리
 - urls.py : URL과 이에 해당하는 적절한 views를 연결

앱 구조
 - admin.py : 관리자용 페이지 설정
 - models.py : DB와 관련된 Model을 정의, MTV 패턴의 M
 - views.py : HTTP 요청을 처리하고 해당 요청에 대한 응답을 반환(url, model, template과 연계), MTV 패턴의 V


Django와 요청 & 응답
요청 -> urls.py -> views.py(<-> models.py / templates) -> 응답

template 인식 경로 규칙
app 폴더 / templates / 
		여기 까지 기본 경로
views.py 에서 return render(request, '나머지 경로')

render 함수 : 주어진 템플릿을 주어진 컨텍스트 데이터와 결합하고 렌더링 된 텍스트와 함께 HttpResponse(응답) 객체를 반환하는 함수

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Django Template system : 데이터 표현을 제어하면서, 표현과 관련된 부분을 담당

Django Template Language(DTL) : Template에서 조건, 반복, 변수 등의 프로그래밍적 기능을 제공하는 시스템

DTL Syntax
1. Variable
 render 함수의 세번째 인자로 딕셔너리 데이터를 사용
 딕셔너리 key에 해당하는 문자열이 template에서 사용 가능한 변수명이 됨
 dot(.)를 사용하여 변수 속성에 접근할 수 있음

2. Filters
 표시할 변수를 수정할 때 사용
 chained가 가능하며 일부 필터는 인자를 받기도 함
 약 60개의 built-in template filters를 제공

3. Tags
 반복 또는 논리를 수행하여 제어 흐름을 만듦
 일부 태그는 시작과 종료 태그가 필요
 약 24개의 built-in template tags를 제공

4. Comments
 DTL에서의 주석


템플릿 상속 : 페이지의 공통요소를 포함하고, 하위 템플릿이 재정의 할 수 있는 공간을 정의하는 기본 'skeleton' 템플릿을 작성하여 상속 구조를 구축

'extends' tag : 자식(하위) 템플릿이 부모 템플릿을 확장한다는 것을 알림
 ! 반드시 템플릿 최상단에 작성되어야 함(2개 이상 사용 불가)

'block' tag : 하위 템플릿에서 재정의 할 수 있는 블록을 정의(하위 템플릿이 작성할 수 있는 공간을 지정)


HTML form(요청과 응답)

데이터를 보내고 가져오기 : HTML form element를 통해 사용자와 애플리케이션 간의 상호작용 이해하기

HTML form은 HTTP 요청을 서버에 보내는 가장 편리한 방법

'form' element : 사용자로부터 할당된 데이터를 서버로 전송 -> 웹에서 사용자 정보를 입력하는 여러 방식(text, password, checkbox 등)을 제공

form의 핵심 속성 2가지
'action' & 'method' : 데이터를 어디(action)로 어떤 방식(method)으로 요청할지

'input' element : 사용자의 데이터를 입력 받을 수 있는 요소(type 속성 값에 따라 다양한 유형의 입력 데이터를 받음)

'name' attribute(input의 핵심 속성) : 입력한 데이터에 붙이는 이름(key) -> 데이터를 제출했을 때 서버는 name 속성에 설정된 값을 통해서만 사용자가 입력한 데이터에 접근할 수 있음

Query String Parameters : 사용자의 입력 데이터를 URL 주소에 파라미터를 통해 서버로 보내는 방법

HTTP request 객체 : form으로 전송한 데이터 뿐만 아니라 모든 요청 관련 데이터가 담겨 있음(view 함수의 첫번째 인자)

form 데이터를 가져오는 방법
request.GET.get('키 값')

DTL 주의사항 : Python처럼 일부 프로그래밍 구조를 사용할 수 있지만 명칭을 그렇게 설계 했을 뿐이지 Python 코드로 실행되는 것이 아니며 Python과는 관련 없음


Django URLs

URL dispatcher : URL 패턴을 정의하고 해당 패턴이 일치하는 요청을 처리할 view 함수를 연결(매핑)

Variable Routing : URL 일부에 변수를 포함시키는 것(변수는 view 함수의 인자로 전달 할 수 있음)

작성법
<path_converter:variable_name>

path converters : URL 변수의 타입을 지정(str, int 등 5가지 타입 지원)
! str은 기본값이라 생략 가능

APP URL mapping : 각 앱에 URL을 정의하는 것 -> 프로젝트와 각 앱이 URL을 나누어 관리를 편하게 하기 위함

include() : 프로젝트 내부 앱들의 URL을 참조할  수 있도록 매핑하는 함수 -> URL의 일치하는 부분까지 잘라내고, 남은 문자열 부분은 후속 처리를 위해 include된 URL로 전달

Naming URL patterns : URL에 이름을 지정하는 것(path 함수의 name 인자를 정의해서 사용)

URL 이름 지정 후 남은 문제 : 두 앱의 url 이름이 같은 상황 -> 이름에 성(키, key)을 붙이자
 app_name 변수 값 설정 -> URL tag 의 최종 변화 : {% url '앱이름:url명' %}

Trailing Slashes : Django는 URL 끝에 '/' 가 없다면 자동으로 붙임


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Django Model : DB 테이블을 정의하고 데이터를 조작할 수 있는 기능들을 제공 -> 테이블 구조를 설계하는 '청사진'

작성한 모델 클래스는 최종적으로 DB에 테이블 구조를 만듦
! id 필드는 자동 생성

django.db.models 모듈의 Model이라는 부모 클래스를 상속받음
Model은 model에 관련된 모든 코드가 이미 작성되어 있는 클래스
-> 개발자는 가장 중요한 테이블 구조를 어떻게 설계할지에 대한 코드만 작성하도록 하기 위한 것(프레임워크의 이점)

클래스 변수명 : 테이블의 각 "필드(열) 이름"

model Field 클래스 : 테이블 필드의 "데이터 타입"

model Field 클래스의 키워드 인자(필드 옵션) : 테이블 필드의 "제약조건" 관련 설정

제약 조건 : 데이터가 올바르게 저장되고 관리되도록 하기 위한 규칙


Migrations : model 클래스의 변경사항(필드 생성, 수정, 삭제 등)을 DB에 최종 반영하는 방법

makemigrations : model class를 기반으로 최종 설계도 작성

migrate : 최종 설계도를 DB에 전달하여 반영

Model Field : DB 테이블의 필드(열)을 정의하며, 해당 필드에 저장되는 데이터 타입과 제약조건을 정의

CharField() : 길이의 제한이 있는 문자열을 넣을 때 사용(필드의 최대 길이를 결정하는 max_length는 필수 인자)

TextField() : 글자의 수가 많을 때 사용

DateTimeField() : 날짜와 시간을 넣을 때 사용

DateTimeField의 선택인자
 auto_now : 데이터가 저장될 때마다 자동으로 현재 날짜시간을 저장
 auto_now_add : 데이터가 처음 생성될 때만 자동으로 현재 날짜시간을 저장


Admin site

Django는 추가 설치 및 설정 없이 자동으로 관리자 인터페이스를 제공 -> 데이터 확인 및 테스트 등을 진행하는데 매우 유용

admin 계정 생성
python manage.py createsuperuser

email은 선택사항
비밀번호는 보안상 터미널에 출력되지 않음

admin에 모델 클래스 등록 : admin.py에 작성한 모델 클래스를 등록해야만 admin site에서 확인 가능


데이터베이스 초기화
1. migration 파일 삭제(! migration한 .py 파일만 삭제할 것 __init__.py 나 migrations 폴더 삭제 주의)
2. db.sqlite3 파일 삭제

Migrations 기타 명령어
showmigrations : migrations 파일들이 migrate 됐는지 여부를 확인하는 명령어

첫 migrate 시 출력 내용이 많은 이유 : Django 프로젝트가 동작하기 위해 미리 작성되어 있는 기본 내장 app들에 대한 migration 파일들이 함께 migrate 되기 때문

SQLite : 데이터베이스 관리 시스템 중 하나이며 Django의 기본 데이터베이스로 사용됨(파일로 존재하며 가볍고 호환성이 좋음)

CRUD : 소프트웨어가 가지는 기본적인 데이터 처리 기능
Create(저장)
Read(조회)
Update(갱신)
Delete(삭제)

id 값은 재사용 하지 않음(삭제해도 번호는 누적됨)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

ORM : 객체 지향 프로그래밍 언어를 사용하여 호환되지 않는 유형의 시스템 간에 데이터를 변환하는 기술

django(python object) 와 SQL 간의 소통을 가능하게 해줌


QuerySet API : ORM에서 데이터를 검색, 필터링, 정렬 및 그룹화 하는데 사용하는 도구 -> API를 사용하여 SQL이 아닌 Python 코드로 데이터를 처리

구문
Article.objects.all()
Model class.Manager.Queryset API

Query
 - 데이터베이스에 특정한 데이터를 보여 달라는 요청
 - "쿼리문을 작성한다" : 원하는 데이터를 얻기 위해 데이터베이스에 요청을 보낼 코드를 작성한다.
 - 파이썬으로 작성한 코드가 ORM에 의해 SQL로 변환되어 데이터베이스에 전달되며, 데이터베이스의 응답 데이터를 ORM이 QuerySet이라는 자료 형태로 변환하여 우리에게 전달

QuerySet
 - 데이터베이스에게서 전달 받은 객체 목록(데이터 모음) : 순회가 가능한 데이터로써 1개 이상의 데이터를 불러와 사용할 수 있음
 - Django ORM을 통해 만들어진 자료형
 - 단, 데이터베이스가 단일한 객체를 반환 할 때는 QuerySet이 아닌 모델(Class)의 인스턴스로 반환됨

정리하면 Python의 모델 클래스와 인스턴스를 활용해 DB에 데이터를 저장, 조회, 수정, 삭제하는 것

외부 라이브러리 설치 및 설정
pip install django-extensions

settings.py의 INSTALLED_APPS 리스트에 django_extensions 추가(여기서는 언더바_ 임)

Django shell : Django 환경 안에서 실행되는 python shell(입력하는 QuerySet API 구문이 Django 프로젝트에 영향을 미침)

Django shell 실행
python manage.py shell_plus

save() : 객체를 데이터베이스에 저장하는 메서드

all() : 전체 데이터 조회
Article.objects.all()

get() : 단일 데이터 조회
Article.objects.get(pk=1)

get() 특징
 - 객체를 찾을 수 없으면 DoesNotExist 예외를 발생시키고, 둘 이상의 객체를 찾으면 MultipleObjectsReturned 예외를 발생시킴
 -> 위와 같은 특징을 가지고 있기 때문에 primary key와 같이 고유성을 보장하는 조회에서 사용해야 함

filter() : 특정 조건 데이터 조회
 !! -> QuerySet이 반환됨

데이터 수정 : 인스턴스 변수를 변경 후 save 메서드 호출
조회 -> 변경 -> 저장

데이터 삭제 : 삭제하려는 데이터 조회 후 delete 메서드 호출


Field lookups : 특정 레코드에 대한 조건을 설정하는 방법
 QuerySet 메서드 filter(), exclude() 및 get() 에 대한 키워드 인자로 지정됨

ORM, QuerySet API를 사용하는 이유
 - 데이터베이스 쿼리를 추상화하여 Django 개발자가 데이터베이스와 직접 상호작용하지 않아도 되도록 함
 - 데이터베이스와의 결합도를 낮추고 개발자가 더욱 직관적이고 생산적으로 개발할 수 있도록 도움

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Django shell에서 연습했던 QuerySet API를 직접 view 함수에서 사용하기

Read

전체 게시글 조회
views -> 함수 내 변수명에 Article.objects.all()로 할당
이후 html에서 for 문으로 조회

단일 게시글 조회
views -> 함수 내 변수명에 Article.objects.get(pk=pk)로 할당 (함수 매개변수에 pk도 추가)

NoReverseMatch 오류 : url 문제

html 내에서 단일 게시글 이동 url 작성 시 {% url '앱이름:주소명' 사용할 인자(article.pk) %}


Create 로직을 구현하기 위해 필요한 view 함수의 개수
 - new : 사용자 입력 데이터를 받을 페이지를 렌더링
 - create : 사용자가 입력한 데이터를 받아 DB에 저장


HTTP request methods : 데이터(리소스)에 어떤 요청(행동)을 원하는지를 나타내는 것(GET & POST)

'GET' Method : 특정 리소스를 조회하는 요청(GET으로 데이터를 전달하면 Query String 형식으로 보내짐) Read

'POST' Method : 특정 리소스에 변경(생성, 수정, 삭제)을 요구하는 요청(POST로 데이터를 전달하면 HTTP Body에 담겨 보내짐) Create, Update, Delete

POST Method 적용 -> 게시글 작성 후 403응답 확인

HTTP response status code : 특정 HTTP 요청이 성공적으로 완료되었는지를 3자리 숫자로 표현하기로 약속한 것

403 Forbidden : 서버에 요청이 전달되었지만, 권한 때문에 거절되었다는 것을 의미

거절 이유 : CSRF 토큰 누락

CSRF : 사이트 간 요청 위조

DTL의 csrf_token 태그를 사용해 사용자에게 토큰 값을 부여(form 태그 안쪽에 추가)
!!!!!!!! POST 사용 시 항상 따라올 것

POST일 때만 Token을 확인하는 이유 : POST는 단순 조회를 위한 GET과 달리 특정 리소스에 변경(생성, 수정, 삭제)을 요구하는 의미와 기술적인 부분을 가지고 있기 때문, DB에 조작을 가하는 요청은 반드시 인증 수단이 필요 -> 데이터베이스에 대한 변경사항을 만드는 요청이기 때문에 토큰을 사용해 최소한의 신원 확인을 하는 것


redirect

게시글 작성 후 완료를 알리는 페이지를 응답하는 것은 POST 요청에 대한 적절한 응답이 아님
-> 다른 페이지로 사용자를 보내야 한다.

redirect() : 클라이언트가 인자에 작성된 주소로 다시 요청을 보내도록 하는 함수


Delete

views.py -> delete 함수에 객체 조회 후 delete() 메서드 사용


Update(view 함수 2개 사용)
 - edit : 사용자 입력 데이터를 받을 페이지를 렌더링
 - update : 사용자가 입력한 데이터를 받아 DB에 저장

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Form

HTML 'form' : 지금까지 사용자로부터 데이터를 받기위해 활용한 방법, 그러나 비정상적 혹은 악의적인 요청을 필터링 할 수 없음 -> 유효한 데이터인지에 대한 확인이 필요

유효성 검사 : 수집한 데이터가 정확하고 유효한지 확인하는 과정

유효성 검사를 구현하기 위해서는 많은 것들을 고려해야 함 -> Django가 제공하는 Form을 사용

Django Form : 사용자 입력 데이터를 수집하고, 처리 및 유효성 검사를 수행하기 위한 도구 -> 유효성 검사를 단순화하고 자동화 할 수 있는 기능을 제공

!!form 필드에서는 CharField에 max_length가 필수 인자가 아님

models로 테이블을 만든 것처럼 forms로 input을 만든다

{{ form.as_p }} : label, input 쌍을 p 태그로 감싸는 옵션


Widgets : 'input' element의 표현을 담당

Form : 사용자 입력 데이터를 DB에 저장하지 않을 때(ex 로그인)

ModelForm : 사용자 입력 데이터를 DB에 저장해야 할 때(ex 게시글, 회원가입)

ModelForm : Model과 연결된 Form을 자동으로 생성해주는 기능을 제공

Meta class : ModelForm의 정보를 작성하는 곳

'fields' 및 'exclude' 속성 : exclude 속성을 사용하여 모델에서 포함하지 않을 필드를 지정할 수도 있음


is_valid() : 여러 유효성 검사를 실행하고, 데이터가 유효한지 여부를 Boolean으로 반환
! 빈 값 허용 X, max_length

update 할 때 instance=article 로 조회해야 save() 메서드가 수정으로 적용됨


view 함수 구조 변화

new & create view 함수 간 공통점과 차이점
 - 공통점 : 데이터 생성을 구현하기 위함
 - 차이점 : new는 GET method 요청(조회)만을, create는 POST method 요청(생성)만을 처리

차이점을 이용하여 함수 결합
 - 두 함수의 차이점인 request.method에 따른 분기
 - POST라면 create 로직 작동
 - POST가 아니라면 단순히 form 인스턴스 생성
 - context에 담기는 form은 is_valid를 통과하지 못해 에러메시지를 담은 form이거나 else문을 통한 form 인스턴스(중복성을 활용)
 
 - 사용하지 않는 new url 제거
 - new url을 create url로 변경
 - new 템플릿을 create 템플릿으로 변경

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Static Files(정적 파일) : 서버 측에서 변경되지 않고 고정적으로 제공되는 파일

기본 경로에서 제공하기

static files 기본 경로 : app폴더/static/

{% load static %} : static 사용하겠다고 작성(!! extends보다 위에 작성할 수 없음)

STATIC_URL : 기본 경로 및 추가 경로에 위치한 정적 파일을 참조하기 위한 URL, 실제 파일이나 디렉토리가 아니며, URL로만 존재
 URL + STATIC_URL + 정적파일 경로

static files 추가 경로 : STATICFILES_DIRS에 문자열 값으로 추가 경로 설정

STATICFILES_DIRS : 정적 파일의 기본 경로 외에 추가적인 경로 목록을 정의하는 리스트

정적 파일을 제공하려면 요청에 응답하기 위한 URL이 필요


Media Files : 사용자가 웹에서 업로드하는 정적 파일

ImageField() : 이미지 업로드에 사용하는 모델 필드
 ! 이미지 객체가 직접 저장되는 것이 아닌 '이미지 파일의 경로' 가 문자열로 DB에 저장

미디어 파일을 제공하기 전 준비
 1. settings.py에 MEDIA_ROOT, MEDIA_URL 설정
 2. 작성한  MEDIA_ROOT와 MEDIA_URL에 대한 url 지정

MEDIA_ROOT : 미디어 파일들이 위치하는 디렉토리의 절대 경로
MEDIA_URL : MEDIA_ROOT에서 제공되는 미디어 파일에 대한 주소를 생성(STATIC_URL과 동일한 역할)

html -> form 요소에 enctype 속성 추가
request.FILES

업로드 파일의 경로 : article.image.url(url 속성을 통해 업로드 파일의 경로 값을 얻을 수 있음)

ImageField()의 upload_to 인자를 사용해 미디어 파일 추가 경로 설정

request.FILES가 두번째 위치 인자인 이유 : ModelForm 상위 클래스의 생성자 함수 키워드 인자