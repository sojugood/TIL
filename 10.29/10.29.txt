API : 애플리케이션과 프로그래밍으로 소통하는 방법
 -> 클라이언트 - 서버처럼 서로 다른 프로그램에서 요청과 응답을 받을 수 있도록 만든 체계


REST : API Server를 개발하기 위한 일종의 소프트웨어 설계 방법론 약속(규칙X)

RESTful API
 - REST 원리를 따르는 시스템을 RESTful하다고 부름
 - 자원을 정의하고 자원에 대한 주소를 지정하는 전반적인 방법을 서술

REST API : REST라는 설계 디자인 약속을 지켜 구현한 API

REST에서 자원을 정의하고 주소를 지정하는 방법
 1. 자원의 식별
  - URI
 2. 자원의 행위
  - HTTP Methods
 3. 자원의 표현
  - JSON 데이터
  - 궁극적으로 표현되는 데이터 결과물


DRF : Django에서 Restful API 서버를 쉽게 구축할 수 있도록 도와주는 오픈소스 라이브러리

Serializaton(직렬화) : 여러 시스템에서 활용하기 위해 데이터 구조나 객체 상태를 나중에 재구성할 수 있는 포맷으로 변환하는 과정
 -> 어떠한 언어나 환경에서도 나중에 다시 쉽게 사용할 수 있는 포맷으로 변환하는 과정

Single Model

'api_view' decorator
 - DRF view 함수에서는 필수로 작성되며 view 함수를 실행하기 전 HTTP 메서드를 확인
 - 기본적으로 GET 메서드만 허용되며 다른 메서드 요청에 대해서는 405 Method Not Allowed로 응답
 - DRF view 함수가 응답해야 하는 HTTP 메서드 목록을 작성

many=True : 다중 데이터를 받아올 때(데이터가 쿼리셋일 때) 사용

raise_exception
 - is_valid()는 유효성 검사 오류가 있는 경우 ValidationError 예외를 발생시키는 선택적 raise_exception 인자를 사용할 수 있음
 - DRF에서 제공하는 기본 예외 처리기에 의해 자동으로 처리되며 기본적으로 HTTP 400 응답을 반환


PUT(수정) 에서 원하는 필드만 수정해서 요청 보냈을 때 유효성 검사 통과하려면
 - partial=True 추가하기
 - 필드가 여러 개 일 때!(입력받을 수 있는 필드가 한 개만 존재하면 필요없음)

read_only_fields(읽기 전용 필드)
 - 데이터를 전송하는 시점에 유효성 검사에서 제외시키고, 데이터 조회 시에는 출력하는 필드

source
 - 필드를 채우는 데 사용할 속성의 이름
 - 점 표기법을 사용하여 속성을 탐색할 수 있음

주의 : 읽기 전용 필드 지정 이슈
 - 특정 필드를 override 혹은 추가한 경우 read_only_fields는 동작하지 않음
 - 해당 필드의 read_only 키워드 인자로 작성해야 함


API 문서화

OpenAPI Specification : RESTful API를 설명하고 시각화하는 표준화된 방법
 -> API에 대한 세부사항을 기술할 수 있는 공식 표준


Django shortcuts functions

get_object_or_404()
 - 모델 manager objects에서 get()을 호출하지만, 해당 객체가 없을 땐 기존 DoesNotExist 예외 대신 Http404를 raise함

get_list_or_404()
 - 모델 manager objects에서 filter()의 결과를 반환하고, 해당 객체 목록이 없을 땐 Http404를 raise함

사용하는 이유 : 클라이언트에게 원인이 정확하지 않은 에러를 제공하기 보다는, 적절한 예외 처리를 통해 보다 정확한 에러 현황을 전달하는 것도 매우 중요한 개발 요소 중 하나이기 때문

