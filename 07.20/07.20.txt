import print

pprint.pprint()



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
제어문
 코드의 실행 흐름을 제어하는 데 사용되는 구문
 조건에 따라 코드 블록을 실행하거나 반복적으로 코드를 실행


- 조건문
 주어진 조건식을 평가하여 해당 조건이 참(True)인 경우에만 코드 블록을 실행하거나 건너뜀

 if / elif / else : 파이썬 조건문에 사용되는 키워드

 - if statement의 기본 구조
 if 표현식:
 	코드 블록
 elif 표현식:
 	코드 블록
 else:
 	코드 블록

 elif와 else는 선택적으로 사용가능


- 반복문
 주어진 코드 블록을 여러 번 반복해서 실행하는 구문
 특정 작업을 반복적으로 수행 / 주어진 조건이 참인 동안 반복

 for / while : 파이썬 반복문에 사용되는 키워드

for

 - for : 임의의 시퀀스의 항목들을 그 시퀀스에 들어있는 순서대로 반복
 
 - for statement의 기본 구조
 for 변수 in 반복 가능한 객체:
 	코드 블록

 - 반복 가능한 객체 : 반복문에서 순회할 수 있는 객체(시퀀스 객체 뿐만 아니라 dict, set 등도 포함)

 - 순회 : 문자열 / range / 인덱스로 리스트 

 - 중첩된 반복문
 안쪽 반복문은 outers 리스트의 각 항목에 대해 한 번씩 실행됨
 print가 호출되는 횟수 => len(outers) * len(inners) (경우의 수)

 - 중첩 리스트 순회
 안쪽 리스트 요소에 접근하려면 바깥 리스트를 순회하면서 중첩 반복을 사용해 각 안쪽 반복을 순회


while
! 종료 조건을 달아줘야 한다.(07.19 내용 중 똑같은 거 시험에 출제)

 - while : 주어진 조건식이 참(True)인 동안 코드를 반복해서 실행 == 조건식이 거짓(False)가 될 때 까지 반복

 - while statement의 기본 구조
 while 조건식:
 	코드 블록


적절한 반복문 활용하기
 - for
 반복 횟수가 명확하게 정해져 있는 경우에 유용
 예를 들어 리스트, 튜플, 문자열 등과 같은 시퀀스 형식의 데이터를 처리할 때

 - while
 반복 횟수가 불명확하거나 조건에 따라 반복을 종료해야 할 때 유용
 예를 들어 사용자의 입력을 받아서 특정 조건이 충족될 때까지 반복하는 경우


반복 제어
 for문과 while은 매 반복마다 본문 내 모든 코드를 실행하지만 때때로 일부만 실행하는 것이 필요할 때가 있음

 - break : 반복을 즉시 중지

 - continue : 현재 반복문의 남은 코드를 건너뛰고 다음 반복으로 건너뜀 ******(48p도 참고)	


List comprehension : 간결하고 효율적인 리스트 생성 방법

ex)
 [expression for 변수 in iterable]
 list(expression for 변수 in iterable)
(54p 참고)

List comprehension과 if 조건문
ex)
 [expression for 변수 in iterable if 조건식]
 list(expression for 변수 in iterable if 조건식)

SET 과 TUPLE 도 가능
 ex)
 SET = {expression for 변수 in iterable}
 TUPLE = tuple(expression for 변수 in iterable)


일반적인 방법과 List comprehension의 가독성


리스트를 생성하는 3가지 방법 비교
 1. for loop
 2. map
 3. list comprehension


- pass : 아무런 동작도 수행하지 않고 넘어가는 역할
 -> 문법적으로 문장이 필요하지만 프로그램 실행에는 영향을 주지 않아야 할 때 사용

 ex)
 1. 코드 작성 중 미완성 부분(함수 정의)
 2. 조건문에서 아무런 동작을 수행하지 않아야 할 때
 3. 무한 루프에서 조건이 충족되지 않을 때 pass를 사용하여 루프를 계속 진행하는 방법


- enumerate : iterable 객체의 각 요소에 대해 인덱스와 함께 반환하는 내장함수(인덱스, 값)

enumerate(iterable, start = 0) <- start의 숫자를 바꿔주면 인덱스의 시작 번호를 바꿔줄 수 있음

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
2일차 내용 이어서


Other Types

 - None : 파이썬에서 '값이 없음'을 표현하는 자료형
! 0, 빈 문자열, False 와 다름.

 - Boolean : 참(True)과 거짓(False)을 표현하는 자료형
 is_~~

 - Collection : 여러 개의 항목 또는 요소를 담는 자료 구조
 str, list, tuple, set, dict


Type Conversion

 암시적 형변환 : 파이썬이 자동으로 형변환을 하는 것

 명시적 형변환 : 개발자가 직접 형변환을 하는 것 / 암시적 형변환이 아닌 경우를 모두 포함
! int('3.5') 는 불가 <- 3.5는 정수가 아니라 int로 변환이 불가함


비교 연산자(103, 104p)******
 is & == / is not & != 의 차이
 is는 식별성, ==는 동등성



논리 연산자
 
 - 단축평가 : 논리 연산에서 두 번째 피연산자를 평가하지 않고 결과를 결정하는 동작

 ex)
 print(3 and 5)
 print(False and 5)
 print(5 and False)
 print(5 and 3)
! and 앞 부분이 False(0)이면 뒤는 볼 필요도 없음(뒤 값 무시(평가되지 않음)) -> 결과 False(0) 고정
! and 앞 부분이 True 이면 뒤가 False(0)인지 True인지가 중요해짐 -> 결과가 뒤에 있는 값으로 나옴
! or 앞 부분이 True이면 뒤 볼 필요 없이 True임(뒤 값 무시(평가되지 않음)) -> 결과가 앞에 있는 값으로 나옴
! or 앞 부분이 False(0)이면 뒤 값이 중요해짐 -> 결과가 뒤에 있는 값으로 나옴




멤버십 연산자 : 특정 값이 시퀀스나 다른 컬렉션에 속하는지 여부를 확인

 - in : 왼쪽 피연산자가 오른쪽 피연산자의 시퀀스에 속하는지를 확인
 - not in : 왼쪽 피연산자가 오른쪽 피연산자의 시퀀스에 속하지 않는지를 확인


시퀀스형 연산자

 + : 결합 연산자
  * : 반복 연산자

 ex)
 print([1, 2] + [3, 4]) -> [1, 2, 3, 4]
 print([1, 2] * 2) -> [1, 2, 1, 2]

연산자 우선순위(121p)

 ex) -2**2 = -4 (괄호가 없으므로 **(거듭제곱)이 먼저 연산)