20 / 10 / 2
JavaScript
객관식

함수 정의 방법 3가지(선언식, 표현식, 화살표) 중 옳지 않은 코드 고르기
선언식 : function FUNC() {}
표현식 : const FUNC = function () {}
화살표 : const FUNC = () => {}


Front에서 Server로 요청을 보낼 때 그냥 보내면 받을 수 없으니 바꿔서 보내야 함. 바꿔주는 함수?
JSON.stringify()


let, const의 유효범위
둘 다 블록 스코프, 재선언 불가
차이점 : let은 재할당 가능, const는 재할당 불가능


classList 메서드 3개 (4개 보여주고 사용 불가한 거 찾기)
add, remove, toggle


원시 자료형에 대해 옳지 않은 것
원시 자료형 : string, number, boolean, undefined, null
참조 자료형 : object, array, function


논리연산자
&&, ||, !


for of, for in 등 for 관련된 메서드 사용법
for of : 반복 가능한 (배열 or 문자열)에 사용
for in : 객체의 키 접근에 사용


화살표 함수 설명 옳지 않은 것
const funcName = (param) => { return param }
function 키워드 제거 후 => 작성
매개변수 하나면 () 생략가능
본문의 표현식이 한 줄이면 {}랑 return 생략 가능
인자가 없다면 () 또는 _ 로 표시 가능
객체를 return 한다면 return을 명시적으로 작성해야 함(작성하지 않으려면 소괄호로 객체를 감싸야 함)


전개 구문(spread, unpacking 사용법 옳지 않은 것)
함수에서
함수 호출 시 인자 확장(...배열 하면 언패킹해서 함수 매개변수로 전달됨)
나머지 매개변수 압축(함수 정의 시 마지막 매개변수로 ...매개변수 하면 나머지 압축)


실행 결과 같지 않은 것 고르기(힌트 : 원본배열)
배열은 참조


Event 조작(3번이나 발생한 경우 현상 설명)
버블링 때문


Event 기본 동작 막는 것(prevent?)
.preventDefault()


then 메서드 체이닝 하는 이유
비동기 작업의 순차적 처리를 위해서
유연성
코드 관리
에러 처리
가독성 향상


함수에 대한 설명


배열 메서드 중 끝에 추가하는 메서드?
push()


쿼리셀렉터에 들어갈 수 없는 것
유효한 CSS 선택자가 아닌 것


변별력
변별력
변별력




단답식

호출하는 방법에 따라 달라지는 키워드 this?
this


구조분해 할당 문법을 사용하는 법
const { property } = object는 const property = object.property와 같음


단축 평가를 optional chaining으로 바꾸는 법
obj.property.temp 를 평가하기 위해서는
1. 단축 평가
(obj.property && obj.property.temp)
2. optional chaining
obj.property?.temp


소스코드의 결과값(반복문에 대한 이해)


비동기를 통해 웹에서 통신하는 방식(그런 방식을 통틀어 뭐라고 부르는지)
AJAX(Ajax)


변수 선언 키워드 중 하나
let, const, var


DOM 객체 중 상단에 있는 객체 종류 중 진입점 객체
document


값을 비어있을 수 있게 하거나 비어있게 되는 현상 중 본인이 의도하지 않았는데 비우면 어떻게 되는지
undefined


Event 발생 함수(addEventListener)
addEventListener



서술형

Javascript는 ===(3개) 써야는데 그 이유
동등 연산자(==)는 암묵적 타입 변환을 통해 값만을 비교하고 일치 연산자(===)는 값과 타입을 모두 비교하기 때문에 엄격한 평가가 이루어지므로 정확한 비교를 위해서는 일치 연산자를 사용해야 한다.

변별력