'클라이언트 - 서버' 구조

클라이언트 ---요청---> 서버

클라이언트 <---응답--- 서버


클라이언트(Client) : 서비스를 요청하는 주체(웹 사용자의 인터넷이 연결된 장치, 웹 브라우저)

서버(Server) : 클라이언트의 요청에 응답하는 주체(웹 페이지, 앱을 저장하는 컴퓨터)


프로젝트 및 가상환경

가상 환경 : Python 애플리케이션과 그에 따른 패키지들을 격리하여 관리할 수 있는 독립적인 실행 환경

가상 환경 - 이동의 개념 X - on/off 개념

가상 환경 패키지 공유
pip freeze > requirements.txt

공유받은 패키지 설치
pip install -r requirements.txt


Django 프로젝트 생성 전 루틴

# 1. 가상환경(venv) 생성
$ python -m venv venv

# 2. 가상환경 활성화
$ source venv/Scripts/activate

# 3. Django 설치
$ pip install Django

# 4. 의존성 파일 생성
$ pip freeze > requirements.txt

# 5. .gitignore 파일 생성(첫 add 전)

# 6. git 저장소 생성

# 7. Django 프로젝트 생성
$ django-admin startproject firstpjt .
(' .'은 현재 디렉토리에 생성하겠다는 것을 의미함, 현재 디렉토리에 manage.py 생성)

Django 서버 실행
$ python manage.py runserver

서버 종료(!!종료 여부 항상 확인)
crtl + c

가상환경 비활성화
$ deactivate


LTS(Long-Term Support)

 - 프레임워크나 라이브러리 등의 소프트웨어에서 장기간 지원되는 안정적인 버전을 의미할 때 사용

 - 기업이나 대규모 프로젝트에서는 소프트웨어 업그레이드에 많은 비용과 시간이 필요하기 때문에 안정적이고 장기간 지원되는 버전이 필요


Django project : 애플리케이션의 집합(DB 설정, URL 연결, 전체 앱 설정 들을 처리)

Django applicaiton : 독립적으로 작동하는 기능 단위 모듈(각자 특정한 기능을 담당하며 다른 앱들과 함께 하나의 프로젝트를 구성)


앱 사용 과정

1. 앱 생성
! 앱의 이름은 '복수형'으로 지정하는 것을 권장
$ python manage.py startapp articles

2. 앱 등록
! 반드시 앱을 생성한 후에 등록해야 함
! 등록 후 생성은 불가능
프로젝트 폴더 내 settings.py 의 INSTALLED_APPS 에 등록


Django 디자인 패턴

디자인 패턴 : 소프트웨어 설계에서 발생하는 문제를 해결하기 위한 일반적인 해결책(공통적인 문제를 해결하는데 쓰이는 형식화 된 관행)

MVC 디자인 패턴(Model, View, Controller) : 애플리케이션을 구조화하는 대표적인 패턴(데이터, 사용자 인터페이스, 비즈니스 로직을 분리)
! 시각적 요소와 뒤에서 실행되는 로직을 서로 영향 없이, 독립적이고 쉽게 유지 보수할 수 있는 애플리케이션을 만들기 위해

MTV 디자인 패턴(Model, Template, View) : Django에서 애플리케이션을 구조화하는 패턴(기존 MVC 패턴과 동일하나 명칭을 다르게 정의한 것)
 View -> Template
 Controller -> View


프로젝트 구조

 - settings.py : 프로젝트의 모든 설정을 관리
 - urls.py : URL과 이에 해당하는 적절한 views를 연결
 - __init__.py : 해당 폴더를 패키지로 인식하도록 설정
 - asgi.py : 비동기식 웹 서버와의 연결 관련 설정
 - wsgi.py : 웹 서버와의 연결 관련 설정
 - manage.py : Django 프로젝트와 다양한 방법으로 상호작용 하는 커맨드라인 유틸리티
 !하위 4개 파일 수정할 일 없음


앱 구조

 - admin.py : 관리자용 페이지 설정
 - models.py : DB와 관련된 Model을 정의, MTV 패턴의 M
 - views.py : HTTP 요청을 처리하고 해당 요청에 대한 응답을 반환(url, mode, template과 연계), MTV 패턴의 V
 !그 외 파일 수정할 일 없음


Django와 요청 & 응답

요청 -> 프로젝트(urls.py) -> 앱(views.py <--> models.py / templates) -> 응답

경로 규칙
app폴더 / templates / articles / index.html
-----------------------여기까지 기본 경로 : 그래서 이 지점 이후로 경로 작성(return에 경로 참고)