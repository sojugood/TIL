SQL 1

데이터베이스 : 체계적인 데이터 모음

데이터 : 저장이나 처리에 효율적인 형태로 '변환'된 정보

데이터베이스 역할 : 데이터를 저장하고 조작(CRUD)

관계형 데이터베이스 : 데이터 간에 관계가 있는 데이터 항목들의 모음
 테이블, 행, 열의 정보를 구조화하는 방식
 서로 관련된 데이터 포인터를 저장하고 이에 대한 엑세스를 제공

관계 : 여러 테이블 간의 (논리적) 연결

1. Table : 데이터를 기록하는 곳

2. Field(Columm) : 각 필드에는 고유한 데이터 형식(타입)이 지정됨

3. Record(Row) : 각 레코드에는 구체적이 데이터 값이 저장됨

4. Database(Schema) : 테이블의 집합

5. Primary Key(기본 키) : 각 레코드의 고유한 값, 관계형 데이터베이스에서 레코드의 식별자로 활용

6. Foreign Key(왜래 키) : 테이블의 필드 중 다른 테이블의 레코드를 식별할 수 있는 키, 다른 테이블의 기본 키를 참조, 각 레코드에서 서로 다른 테이블 간의 관계를 만드는 데 사용

DBMS(Database Management System) : 데이터베이스를 관리하는 소프트웨어 프로그램

RDBMS = Relational + DBMS = 관계형 데이터베이스를 관리하는 소프트웨어 프로그램

SQLite : 경량의 오픈 소스 데이터베이스 관리 시스템
 -> 컴퓨터나 모바일 기기에 내장되어 간단하고 효율적인 데이터 저장 및 관리를 제공


SQL(Structure Query Language) : 데이터베이스에 정보를 저장하고 처리하기 위한 프로그래밍 언어

SQL Syntax

- SQL 키워드는 대소문자를 구분하지 않음 : 하지만 대문자로 작성하는 것을 권장(명시적 구분)

- 각 SQL Statements의 끝에는 세미콜론(;)이 필요 : 세미콜론은 각 SQL Statements을 구분하는 방법(명령어의 마침표)


SQL Statements : SQL을 구성하는 가장 기본적인 코드 블록

수행 목적에 따른 SQL Statements 4가지 유형
1. DDL - 데이터 정의 : 데이터의 기본 구조 및 형식 변경(CREATE, DROP, ALTER)
2. DQL - 데이터 검색 : 데이터 검색(SELECT) - CRUD에서의 Read
3. DML - 데이터 조작 : 데이터 조작(추가, 수정, 삭제)(INSERT, UPDATE, DELETE)
4. DCL - 데이터 제어 : 데이터 및 작업에 대한 사용자 권한 제어(COMMIT, ROLLBACK, GRANT, REVOKE)

Query : 데이터베이스로부터 정보를 요청하는 것(쿼리문 = SQL문)

SQL 표준



DQL

Querying data

SELECT statement : 테이블에서 데이터를 조회

SELECT syntax
 - SELECT 키워드 이후 데이터를 선택하려는 필드를 하나 이상 지정
 - FROM 키워드 이후 데이터를 선택하려는 테이블의 이름을 지정

SELECT 정리
 - SELECT 문을 사용하여 테이블의 데이터를 조회 및 반환
 - '*' (asterisk)를 사용하여 모든 필드 선택


Sorting data

ORDER BY statement : 조회 결과의 레코드를 정렬

ORDER BY syntax
 - FROM clause 뒤에 위치
 - 하나 이상의 컬럼을 기준으로 결과를 오름차순(ASC, 기본값), 내림차순(DESC)으로 정렬

정렬에서의 NULL
 - NULL 값이 존재할 경우 오름차순 정렬 시 결과에 NULL이 먼저 출력

SELECT statement 실행 순서
테이블에서 -> 조회하여 -> 정렬
FROM -> SELECT -> ORDER BY


Filtering data

DISTINCT statement : 조회 결과에서 중복된 레코드를 제거

DISTINCT syntax
 - SELECT 키워드 바로 뒤에 작성해야 함
 - SELECT DISTINCT 키워드 다음에 고유한 값을 선택하려는 하나 이상의 필드를 지정


WHERE statement : 조회 시 특정 검색 조건을 지정

WHERE syntax
 - FROM clause 뒤에 위치
 - search_condition은 비교연산자 및 논리연산자(AND, OR, NOT 등)를 사용하는 구문이 사용됨


Operators

Comparison Operators(비교 연산자)
 - IN : 값이 특정 목록 안에 있는지 확인
 - LIKE : 값이 특정 패턴에 일치하는지 확인(Wildcards와 함께 사용)('%' '_')
Logical Operators(논리 연산자)


LIMIT clause : 조회하는 레코드 수를 제한

LIMIT syntax
 - 하나 또는 두 개의 인자를 사용(0 또는 양의 정수)
 - row_count는 조회하는 최대 레코드 수를 지정

!!!!!!!4번째부터 7번째까지 조회 -> LIMIT 3, 4; <<-- 3칸이후로(4번째부터) 4만큼(7번째까지)



Grouping data

GROUP BY clause : 레코드를 그룹화하여 요약본 생성('집계 함수'와 함께 사용)

Aggregation Functions(집계 함수) : 값에 대한 계산을 수행하고 단일한 값을 반환하는 함수(SUM, AVG, MAX, MIN, COUNT)

GROUP BY syntax
 - FROM 및 WHERE 절 뒤에 배치
 - GROUP BY 절 뒤에 그룹화 할 필드 목록을 작성

HAVING clause
 - 집계 항목에 대한 세부 조건을 지정
 - 주로 GROUP BY와 함께 사용되며 GROUP BY가 없다면 WHERE 처럼 동작


SELECT statement 실행 순서
1. 테이블에서(FROM)
2. 특정 조건에 맞추어(WHERE)
3. 그룹화 하고(GROUP BY)
4. 만약 그룹 중에서 조건이 있다면 맞추고(HAVING)
5. 조회하여(SELECT)
6. 정렬하고(ORDER BY)
7. 특정 위치의 값을 가져옴(LIMIT)



SQL 2

Managing Tables

DDL

CREATE TABLE statement : 테이블 생성

CREATE TABLE syntax
 - 각 필드에 적용할 데이터 타입 작성
 - 테이블 및 필드에 대한 제약조건(constraints) 작성

테이블 스키마(구조) 확인
PRAGMA table_info('table_name');

SQLite 데이터 타입
1. NULL
 - 아무런 값도 포함하지 않음을 나타냄
2. INTEGER
 - 정수
3. REAL
 - 부동 소수점
4. TEXT
 - 문자열
5. BLOB
 - 이미지, 동영상, 문서 등의 바이너리 데이터

Constraints(제약 조건)
테이블의 필드에 적용되는 규칙 또는 제한 사항
 -> 데이터의 무결성을 유지하고 데이터베이스의 일관성을 보장

대표적인 제약 조건
 - PRIMARY KEY : 해당 필드를 기본 키로 지정(INTEGER 타입에만 적용되며, INT, BIGINT등과 같은 정수 유형은 적용되지 않음)

 - NOT NULL : 해당 필드에 NULL 값을 허용하지 않도록 지정

 - FOREIGN KEY : 다른 테이블과의 외래 키 관계를 정의

AUTOINCREMENT Keyword : 자동으로 고유한 정수 값을 생성하고 할당하는 필드 속성
 !삭제된 값은 무시되며 재사용 불가(ex : 1, 2, 3에서 3삭제 하고 새로 생성 -> 4)


ALTER TABLE statement : 테이블 및 필드 조작

ALTER TABLE ADD COLUMN : 필드 추가
ALTER TABLE RENAME COLUMN : 필드 이름 변경(필드명 TO 바꿀필드명)
ALTER TABLE DROP COLUMN : 필드 삭제(다른부분 참조X, PRIMARY KEY가 X, UNIQUE가 X)
ALTER TABLE RENAME TO : 테이블 이름 변경


DROP TABLE statement : 테이블 삭제


타입 선호도(Type Affinity) : 컬럼에 데이터 타입이 명시적으로 지정되지 않았거나 지원하지 않을 때 SQLite가 자동으로 데이터 타입을 추론하는 것



Modifying Data

DML

INSERT statement : 테이블 레코드 삽입

INSERT syntax
 - INSERT INTO 절 다음에 테이블 이름과 괄호 안에 필드 목록 작성
 - VALUES 키워드 다음 괄호 안에 해당 필드에 삽입할 값 목록 작성


UPDATE statement : 테이블 레코드 수정

UPDATE syntax
 - SET 절 다음에 수정할 필드와 새 값을 지정
 - WHERE 절에서 수정할 레코드를 지정하는 조건 작성
 - WHERE 절을 작성하지 않으면 모든 레코드를 수정


DELETE statement : 테이블 레코드 삭제

DELETE syntax
 - DELETE FROM 절 다음에 테이블 이름 작성
 - WHERE 절에서 삭제할 레코드를 지정하는 조건 작성
 - WHERE 절을 작성하지 않으면 모든 레코드를 삭제



Multi table queries

Join

관계 : 여러 테이블 간의 (논리적) 연결

Join이 필요한 순간
 - 테이블을 분리하면 데이터 관리는 용이해질 수 있으나 출력시에는 문제가 있음
 - 테이블 한 개 만을 출력할 수 밖에 없어 다른 테이블과 결합하여 출력하는 것이 필요해짐

JOIN clause : 둘 이상의 테이블에서 데이터를 검색하는 방법

INNER JOIN clause : 두 테이블에서 값이 일치하는 레코드에 대해서만 결과를 반환

INNER JOIN syntax
 - FROM 절 이후 메인 테이블 지정
 - INNER JOIN 절 이후 메인 테이블과 조인할 테이블을 지정
 - ON 키워드 이후 조인 조건을 작성
 - 조인 조건은 두 테이블 간의 레코드를 일치시키는 규칙을 지정

LEFT JOIN clause : 오른쪽 테이블의 일치하는 레코드와 함께 왼쪽 테이블의 모든 레코드 반환

오른쪽 테이블과 매칭되는 레코드가 없으면 NULL을 표시