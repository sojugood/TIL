ORM(Object-Relational-Mapping) : 객체 지향 프로그래밍 언어를 사용하여 호환되지 않는 유형의 시스템 간에 데이터를 변환하는 기술

QuerySet API : ORM에서 데이터를 검색, 필터링, 정렬 및 그룹화 하는데 사용하는 도구
 -> API를 사용하여 SQL이 아닌 Python 코드로 데이터를 처리

QuerySet API 구문
 Article	     . objects   .all()
 Model class / Manager / QuerySet API


Query : 데이터베이스에 특정한 데이터를 보여 달라는 요청
 - "쿼리문을 작성한다." : 원하는 데이터를 얻기 위해 데이터베이스에 요청을 보낼 코드를 작성한다.
 - 파이썬으로 작성한 코드가 ORM에 의해 SQL로 변환되어 데이터베이스에 전달되며, 데이터베이스의 응답 데이터를 ORM이 QuerySet이라는 자료 형태로 변환하여 우리에게 전달
 - 데이터베이스에게서 전달 받은 객체 목록(데이터 모음) : 순회가 가능한 데이터로서 1개 이상의 데이터를 불러와 사용할 수 있음
 - Django ORM을 통해 만들어진 자료형
 - 단, 데이터베이스가 단일한 객체를 반환 할 때는 QuerySet이 아닌 모델(Class)의 인스턴스로 반환됨

!오늘 할 것
Python의 모델 클래스와 인스턴스를 활용해 DB에 데이터를 저장, 조회, 수정, 삭제하는 것

# app 등록 권장 순서

# 1. normal app

# 2. third party app

# 3. django app


변수 = Model클래스명.objects.all() 선언 후
 -> QuerySet : 변수[Index]로 객체 별로 접근 가능


pk(Primary Key) : 모델의 기본 키 필드를 참조하는 속성


create() : 객체 return


articles = Article.objects.all()

for article in articles:
	print(article.title)


all() : 전체 데이터 조회 -> QuerySet으로 return

get() : 단일 데이터 조회(pk에 적합) -> 단일 데이터 조회라서 객체 return

filter() : 특정 조건 데이터 조회 -> return이 항상 QuerySet


Update : 조회를 먼저 해야 함 -> get() 과 함께 사용
 - 변수에 get 메서드를 활용하여 객체 할당 후 원하는 작업 실시 -> .save() 해줘야 반영됨

Delete : delete 메서드 활용 / 역시 조회가 선행되어야 하므로 get()과 함께 사용
 -> 객체 자체를 삭제(이 때, Out 에 보이는 숫자는 delete 명령 시 삭제된 개수를 보여줌, 총 누적이 아님을 주의, 매번 새롭게 계산)

Field lookups : 특정 레코드에 대한 조건을 설정하는 방법
 ex) Article.objects.filter(content__contains='dja')
		     컬럼 명__조회명

t
