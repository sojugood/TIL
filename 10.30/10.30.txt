비동기

Synchronous(동기) : 프로그램의 실행 흐름이 순차적으로 진행(순서가 보장됨)
 -> 하나의 작업이 완료된 후에 다음 작업이 실행되는 방식

동기식 : 주문 후 커피가 나올 때까지 기다려야 함

Asynchronous(비동기) : 프로그램의 실행 흐름이 순차적이지 않으며, 작업이 완료되기를 기다리지 않고 다음 작업이 실행되는 방식(순서가 보장되지 않음)
 -> 작업의 완료 여부를 신경 쓰지 않고 동시에 다른 작업들을 수행할 수 있음

비동기식 : 주문 후 진동 벨이 울리면 커피를 가져옴


비동기 특징
 - 병렬적 수행
 - 당장 처리를 완료할 수 없고 시간이 필요한 작업들은 별도로 요청을 보낸 뒤 응답이 빨리 오는 작업부터 처리


Single Thread 언어, JavaScript

Thread란 : 작업을 처리할 때 실제로 작업을 수행하는 주체로, multi-thread라면 업무를 수행할 수 있는 주체가 여러 개라는 의미


- JavaScript는 한 번에 하나의 일만 수행할 수 있는 Single Thread 언어로 동시에 여러 작업을 처리할 수 없음
- 즉, JavaScript는 하나의 작업을 요청한 순서대로 처리할 수 밖에 없음
-> 그러면 어떻게 Single Thread인 JavaScript가 비동기 처리를 할 수 있을까?

JavaScript Runtime
 - JavaScript가 동작할 수 있는 환경(Runtime)
 - JavaScript 자체는 Single Thread이므로 비동기 처리를 할 수 있도록 도와주는 환경이 필요
 - JavaScript에서 비동기와 관련한 작업은 브라우저 또는 Node와 같은 환경에서 처리


브라우저 환경에서의 JavaScript 비동기 처리 관련 요소
1. JavaScript Engine의 Call Stack
2. Web API
3. Task Queue
4. Event Loop


브라우저 환경에서의 JavaScript 비동기 처리 동작 방식
1. 모든 작업은 Call Stack으로 들어간 후 처리된다.
2. 오래 걸리는 작업이 Call Stack으로 들어오면 Web API로 보내 별도로 처리하도록 한다.
3. Web API에서 처리가 끝난 작업들은 곧바로 Call Stack으로 들어가지 못하고 Task Queue에 순서대로 들어간다.
4. Event Loop가 Call Stack이 비어 있는 것을 계속 체크하고 Call Stack이 빈다면 Task Queue에서 가장 오래된(가장 먼저 처리되어 들어온) 작업을 Call Stack으로 보낸다.

