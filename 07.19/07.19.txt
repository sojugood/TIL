
07.18

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ시퀀스 타입ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
31p ~

f-string

ex)

name = "심상익"
age = 28

print("나는 " + name + "입니다 " + str(age) + "살 입니다")
print("나는 {}입니다 {}살 입니다".format(name, age))
print("나는 %s입니다 %d살 입니다" % (name, age))
print(f"나는 {name}입니다 {age}살 입니다")


index

 h  e  l   l   o
 0  1  2  3   4
-5 -4 -3 -2  -1



자료구조

array = 배열 (숫자만 가능)
list = 연결리스트 (숫자, 문자, 리스트 등 가능)


배열은 조회할 때 좋음(데이터가 순서대로 붙어있음)
! 리스트는 데이터가 순서대로 붙어있지는 않음

리스트는 추가할 때(시작 or 중간) 좋음 / 마지막은 큰 차이 없음
! 배열은 추가할 때(시작 or 중간) 데이터가 많으면 데이터를 다 옮겨줘야 함


리스트는 가변 (변경 가능)


tuple 튜플 (변경 불가)
 여러 개의 값을 순서대로 저장하는 변경 불가능한 시퀀스 자료형(50p)**
 0개 이상의 객체를 포함하며 데이터 목록을 저장
 소괄호()로 표기
 데이터는 어떤 자료형도 저장할 수 있음
 객체가 1개 이면 (1,) 처럼 ,를 꼭 붙여야 함(안 붙이면 정수로 인식함 / ,를 붙여줘야 튜플로 인식함)
 

range (변경 불가)
 연속된 정수 시퀀스를 생성하는 변경 불가능한 자료형

 - 표현
 range(n) : 0부터 n-1 까지의 숫자의 시퀀스 = range(0, n)
 range(n, m) : n부터 m-1 까지의 숫자의 시퀀스


시험
객 단 주
20 10 2

ex)
1.
def test():
	pass
a = ('나', 1, test)  <- 튜플(값 변경 불가)
a[2] = 1

답 : error 발생

2.
print(-2 ** 2) = 

답 : -4

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡNon - 시퀀스 타입ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

dict 딕셔너리(변경 가능)
 key - value 쌍으로 이루어진 순서와 중복이 없는 변경 가능한 자료형
 key는 변경 불가능한 자료형만 사용 가능 (str, int, float, tuple, range ...)
 value는 모든 자료형 사용 가능
 중괄호 {} 로 표기
 key를 통해 value에 접근
 
접근방법
ex)
 dict = {'key' : value, 'key2' : value2}
 dict['key']
 dict.get('key')



set 세트(변경 가능)
 순서와 중복이 없는 변경 가능한 자료형
 수학에서의 집합과 동일한 연산 처리 가능
 중괄호 {} 로 표기

세트의 집합 연산
 합집합 : |
 차집합 : -
 교집합 : &

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡOther Typesㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ





ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Python 내장함수 : https://docs.python.org/ko/3.9/library/functions.html

함수
 특정 작업을 수행하기 위한 재사용 가능한 코드 묶음


# 함수 정의문

def 함수이름(x, y): # x와 y는 매개변수(parameter)
	return value

-----------------> 함수 정의하고 함수 호출

# 함수 호출문

함수이름()



a = 2
b = 3
result = 함수이름(a, b) # a와 b는 인자(argument)



parameter : 매개변수 - 함수를 정의할 때, 함수가 받을 값을 나타내는 변수

return value : 반환 값

argument : 인자 - 함수를 호출할 때, 실제로 전달되는 값

Positional Arguments : 위치인자 - 함수 호출 시 인자의 위치에 따라 전달되는 인자 / 위치인자는 함수 호출 시 반드시 값을 전달해야 함

Default Argument Values : 기본 인자 값 - 함수 정의에서 매개변수에 기본 값을 할당하는 것 / 함수 호출 시 인자를 **전달하지 않으면**, 기본값이 매개변수에 할당됨. ex) def 함수이름(x, y = 기본 인자 값)
만약, y에 인자 값을 전달하면 전달한 값으로 받음

Keyword Arguments : 키워드 인자 - 함수 호출 시 인자의 이름과 함께 값을 전달하는 인자 / 매개변수에 값을 직접 할당하도록 작성하기 때문에, 인자의 순서와 상관없음. ex) 함수이름(y = b, x = a)
!단, 호출 시 키워드 인자는 위치 인자 뒤에 위치해야 함

Arbitrary Arguments Lists : 임의의 인자 목록 - 정해지지 않은 개수의 인자를 처리하는 인자 / 함수 정의 시 매개변수 앞에 '*'를 붙여 사용하며 여러 개의 인자를 tuple로 처리 / '**'를 붙여 사용하면 여러 개의 인자를 dictionary로 묶어 처리
!메모리 측면에서 효율적이진 않음(몇 개의 인자를 받아야 할 지 모르기 때문에 불필요할 수도 있는 메모리 공간을 차지함)

함수 인자 권장 작성순서
- 위치 -> 기본 -> 가변 -> 키워드 -> 가변 키워드 (절대적인 규칙은 아니며, 상황에 따라 유연하게 조정될 수 있음)






범위(Scope)

 함수는 코드 내부에 local scope를 생성하며, 그 외의 공간인 global scope로 구분

 local scope : 함수가 만든 scope (함수 내부에서만 참조 가능) <- 사용 권장

 global scope : 코드 어디에서든 참조할 수 있는 공간

 variable : 변수


변수 수명주기(lifecycle)

 변수의 수명주기는 변수가 선언되는 위치와 스코프에 따라 결정됨

 1. built-in scope
   파이썬이 실행된 이후부터 영원히 유지

 2. global scope
   모듈이 호출된 시점 이후 혹은 인터프리터가 끝날 때까지 유지

 3. local scope
   함수가 호출될 때 생성되고, 함수가 종료될 때까지 유지



이름 검색 규칙(Name Resolution)
 파이썬에서 사용되는 이름(식별자)들은 특정한 이름공간(namespace)에 저장되어 있음
 다음 순서로 이름을 찾아 나가며, LEGB Rule이라고 부름

 1. Local scope : 지역 범위(현재 작업 중인 범위)

 2. Enclosed scope : 지역 범위 한 단계 위 범위

 3. Global scope : 최상단에 위치한 범위

 4. Built-in scope : 모든 것을 담고 있는 범위(정의하지 않고 사용할 수 있는 모든 것)

 * 함수 내에서는 바깥 Scope의 변수에 접근 가능하나 수정은 할 수 없음

 ex) sum을 global scope에서 정의하면, LEGB Rule에 따라 3번에서 먼저 찾기 때문에 4번까지 가지 못하고 내장함수 sum 기능을 사용할 수 없음

 36, 37page 참고



global 키워드
 변수의 스코프를 전역 범위로 지정하기 위해 사용
 일반적으로 함수 내에서 전역 변수를 수정하려는 경우에 사용
주의 사항
 1. golbal 키워드 선언 전에 접근 시
 2. 매개변수에 global 사용 불가



재귀 함수 : 함수 내부에서 자기 자신을 호출하는 함수
 특정 알고리즘 식을 표현할 때 변수의 사용이 줄어들며, 코드의 가독성이 높아짐
 1개 이상의 base case(종료되는 상황)가 존재하고, 수렴하도록 작성

ex) 팩토리얼
 재귀 호출은 n이 0이 될 때까지 반복되며, 종료 조건(return 1)을 설정하여 재귀 호출이 멈추도록 함


유용한 내장 함수
 map(function, iterable) : 순회 가능한 데이터구조(iterable)의 모든 요소에 함수를 적용하고, 그 결과를 map object로 반환

 zip
임의의 iterable을 모아 튜플을 원소로 하는 zip object를 반환



lambda 함수
 이름 없이 정의되고 사용되는 익명 함수
!일회용으로 사용할 목적으로만 사용. 일회용이 아닌 경우 함수를 정의하고 사용하는 것이 맞음(함수 정의의 목적 -> 재사용성)

함수이름 = lambda 매개변수: 표현식 <- 이렇게 쓸 거면 함수 정의해서 쓰는게 맞음(저렇게 사용 X)

ex)
# map + lambda

numbers = [1, 2, 3, 4, 5]
result = list(map(lambda x: x * 2, numbers))
print(result) # [2, 4, 6, 8, 10]




Packing 패킹
 여러 개의 값을 하나의 변수에 묶어서 담는 것

 '*' 을 활용한 패킹 : 남은 요소들을 리스트로 패킹하여 할당(65p)


Unpacking 언패킹
 패킹된 변수의 값을 개별적인 변수로 분리하여 할당하는 것

ex)
lst = [1, 2, 3]
a, b, c = lst

print(a)
print(b)
print(c)

 '*' 을 활용한 언패킹

ex)
lst = [1, 2, 3]

print(lst)
''' 다른 언패킹 예시

for result in lst:
    print(result, end = " ")

    '''
print()

print(*lst)


 '**' 을 활용한 언패킹
** 는 딕셔너리의 키 - 값 쌍을 함수의 키워드 인자로 언패킹(71p)



Module 모듈
 
- 가져오기
 import 모듈명


모듈 사용하기
 . (dot)은 "점의 왼쪽 객체에서 점의 오른쪽 이름을 찾아라" 라는 의미의 연산자


import 하는 다른 방법
 from 모듈명 import 요소명
! 만약 서로 다른 모듈이 같은 이름의 함수를 제공할 경우 문제 발생 - 마지막에 import된 이름으로 대체



패키지
 관련된 모듈들을 하나의 디렉토리에 모아 놓은 것
패키지 > 모듈 > 함수


PSL 내부 패키지
 설치 없이 바로 import하여 사용

외부 패키지
 pip를 사용하여 설치 후 import 필요


패키지 사용 목적
 모듈들의 이름공간은 구분하여 충돌을 방지
 모듈들을 효율적으로 관리하고 재사용할 수 있도록 돕는 역할

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

시험
함수와 Scope ~ Packing & Unpacking