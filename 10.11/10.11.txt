Many to one relationships : 한 테이블의 0개 이상의 레코드가 다른 테이블의 레코드 한 개와 관련된 관계

Comment(N) - Article(1) : 0개 이상의 댓글은 1개의 게시글에 작성될 수 있다.

ForeignKey() : N:1 관계 설정 모델 필드
 - 인스턴스 이름은 참조하는 모델 클래스 이름의 단수형으로 작성하는 것을 권장
 - 클래스를 작성하는 위치와 관계없이 왜래 키는 테이블 필드 마지막에 생성됨

ForeignKey(to, on_delete)
 - to : 참조하는 모델 class 이름
 - on_delete : 왜래 키가 참조하는 객체(1)가 사라졌을 때, 왜래 키를 가진 객체(N)를 어떻게 처리할 지를 정의하는 설정(데이터 무결성)

on_delete의 'CASCADE'
 - 부모 객체(참조 된 객체)가 삭제 됐을 때 이를 참조하는 객체도 삭제

Migration
 - 댓글 테이블의 article_id 필드 확인
 - 참조하는 클래스 이름의 소문자(단수형)로 작성하는 것이 권장 되었던 이유
  -> '참조 대상 클래스 이름' + '_' + '클래스 이름'


역참조
 N:1 관계에서 1에서 N을 참조하거나 조회하는 것
 1 -> N
 -> N은 왜래 키를 가지고 있어 물리적으로 참조가 가능하지만 1은 N에 대한 참조 방법이 존재하지 않아 별도의 역참조 이름이 필요

N -> 1 (참조)
 - 댓글이 어떤 게시글에 작성되었는지를 조회 가능

1 -> N (역참조)
 - 해당 게시글에 작성된 모든 댓글을 조회


역참조 사용 예시
 article.comment_set.all()
 모델 인스턴스.related manager(역참조 이름).QuerySet API

related manager
 N:1 혹은 M:N 관계에서 역참조 시에 사용하는 매니저
 -> objects 매니저를 통해 queryset api를 사용했던 것처럼 related manager를 통해 queryset api를 사용할 수 있게 됨

related manager 이름 규칙
 - N:1 관계에서 생성되는 Related manager의 이름은 참조하는 모델명_set 이름 규칙으로 만들어짐
 - 해당 댓글의 게시글(Comment -> Article) : comment.article
 - 게시글의 댓글 목록(Article -> Comment) : article.comment_set.all()

save(commit=False)
 DB에 저장하지 않고 인스턴스만 반환