데이터베이스 : 체계적인 데이터 모음

데이터 : 저장이나 처리에 효율적인 형태로 변환된 정보

기존의 데이터 저장 방식
 1. 파일 이용
  - 어디에서나 쉽게 사용 가능
  - 데이터를 구조적으로 관리하기 어려움

 2. 스프레드 시트 이용
  - 테이블의 열과 행을 사용해 데이터를 구조적으로 관리 가능

  스프레드 시트의 한계
  - 크기 : 일반적으로 약 100만 행까지만 저장 가능
  - 보안 : 단순히 파일이나 링크 소유 여부에 따른 단순한 접근 권한 기능 제공
  - 정확성 : 변경 발생 시 테이블 모든 위치에서 해당 값을 업데이트 해야함


데이터베이스 역할 : 데이터를 저장하고 조작(CRUD)


관계형 데이터베이스 : 데이터 간에 관계가 있는 데이터 항목들의 모음
 - 테이블, 행, 열의 정보를 구조화하는 방식
 - 서로 관련된 데이터 포인터를 저장하고 이에 대한 액세스를 제공

관계 : 여러 테이블 간의 (논리적) 연결

이 관계로 인해 두 테이블을 사용하여 데이터를 다양한 형식으로 조회할 수 있음
 - 특정 날짜에 구매한 모든 고객 조회
 - 지난 달에 배송일이 지연된 고객 조회 등

각 데이터에 고유한 식별 값을 부여하기(기본 키, Primary Key)

다른 테이블에서 사용할 값(외래 키, Foreign Key)

1. Table(Relation)
 - 데이터를 기록하는 곳

2. Field(Column, Attribute)
 - 각 필드에는 고유한 데이터 형식(타입)이 지정됨

3. Record(Row, Tuple)
 - 각 레코드에는 구체적인 데이터 값이 저장됨

4. Database(Schema)
 - 테이블의 집합

5. Primary Key(기본 키)
 - 각 레코드의 고유한 값
 - 관계형 데이터베이스에서 레코드의 식별자로 활용

6. Foreign Key(외래 키)
 - 테이블의 필드 중 다른 테이블의 레코드를 식별할 수 있는 키
 - 다른 테이블의 기본 키를 참조
 - 각 레코드에서 서로 다른 테이블 간의 관계를 만드는 데 사용


DBMS(Database Management System) : 관계형 데이터베이스를 관리하는 소프트웨어 프로그램
 - 데이터 저장 및 관리를 용이하게 하는 시스템
 - 데이터베이스와 사용자 간의 인터페이스 역할
 - 사용자가 데이터 구성, 업데이트, 모니터링, 백업, 복구 등을 할 수 있도록 도움

SQLite : 경량의 오픈 소스 데이터베이스 관리 시스템


SQL(Structure Query Language) : 데이터베이스에 정보를 저장하고 처리하기 위한 프로그래밍 언어

SQL Syntax
 - SQL 키워드는 대소문자를 구분하지 않음(대문자로 작성하는 것을 권장)
 - 각 SQL Statements의 끝에는 세미콜론(;)이 필요(명령어의 마침표)

SQL Statements : SQL을 구성하는 가장 기본적인 코드 블록

수행 목적에 따른 SQL Statements 4가지 유형
 - DDL : 데이터의 구조 및 형식 변경
 - DQL : 데이터 검색
 - DML : 데이터 조작(추가, 수정, 삭제)
 - DCL : 데이터 및 작업에 대한 사용자 권한 제어


Query : 데이터베이스로부터 정보를 요청하는 것


DQL(Data Query Language) - SELECT

SELECT statement : 테이블에서 데이터를 조회

 - SELECT 키워드 이후 데이터를 선택하려는 필드를 하나 이상 지정
 - FROM 키워드 이후 데이터를 선택하려는 테이블의 이름을 지정

 - SELECT 문을 사용하여 테이블의 데이터를 조회 및 반환
 - *(asterisk)를 사용하여 모든 필드 선택


ORDER BY staement : 조회 결과의 레코드를 정렬

 - FROM caluse 뒤에 위치
 - 하나 이상의 컬럼을 기준으로 결과를 오름차순(ASC, 기본 값), 내림차순(DESC)으로 정렬

NULL 값이 존재할 경우 오름차순 정렬 시 결과에 NULL이 먼저 출력


SELECT statement 실행 순서
 1. 테이블에서 (FROM)
 2. 조회하여 (SELECT)
 3. 정렬 (ORDER BY)


Filtering Data

DISTINCT statement : 조회 결과에서 중복된 레코드를 제거
 - SELECT 키워드 바로 뒤에 작성해야 함
 - SELECT DISTINCT 키워드 다음에 고유한 값을 선택하려는 하나 이상의 필드를 지정

WHERE statement : 조회 시 특정 검색 조건을 지정
 - FROM caluse 뒤에 위치
 - search_condition은 비교연산자 및 논리연산자를 사용하는 구문이 사용됨


Operators

Comparison Operators(비교 연산자)
Logical Operators(논리 연산자)

IN Operator : 값이 특정 목록 안에 있는지 확인
LIKE Operator : 값이 특정 패턴에 일치하는지 확인(Wildcards와 함께 사용)

Wildcard Characters
 - '%' : 0개 이상의 문자열과 일치하는지 확인
 - '_' : 단일 문자와 일치하는지 확인


LIMIT

LIMIT clause : 조회하는 레코드 수를 제한
 - LIMIT [offset,] row_count


Grouping data

GROUP BY clause : 레코드를 그룹화하여 요약본 생성('집계 함수'와 함께 사용)

Aggregation Functions(집계 함수) : 값에 대한 계산을 수행하고 단일한 값을 반환하는 함수(SUM, AVG, MAX, MIN, COUNT)

 - FROM 및 WHERE 절 뒤에 배치
 - GROUP BY 절 뒤에 그룹화 할 필드 목록을 작성

HAVING clause
 - 집계 항목에 대한 세부 조건을 지정
 - 주로 GROUP BY와 함께 사용되며 GROUP BY가 없다면 WHERE 처럼 동작

SELECT statement 실행 순서
 1. 테이블에서(FROM)
 2. 특정 조건에 맞추어(WHERE)
 3. 그룹화하고(GROUP BY)
 4. 만약 그룹 중에서 조건이 있다면 맞추고(HAVING)
 5. 조회하여(SELECT)
 6. 정렬하고(ORDER BY)
 7. 특정 위치의 값을 가져옴(LIMIT)


SQL2

Managing Tables

CREATE TABLE statement : 테이블 생성
 - 각 필드에 적용할 데이터 타입 작성
 - 테이블 및 필드에 대한 제약조건(constraints) 작성



Multi table queries

Join(관계) : 여러 테이블 간의 (논리적)연결

- 테이블을 분리하면 데이터 관리는 용이해질 수 있으나 출력시에는 문제가 있음
- 테이블 한 개 만을 출력할 수 밖에 없어 다른 테이블과 결합하여 출력하는 것이 필요해짐 -->> 'JOIN'

JOIN clause : 둘 이상의 테이블에서 데이터를 검색하는 방법

INNER JOIN clause : 두 테이블에서 값이 일치하는 레코드에 대해서만 결과를 반환
 - FROM 절 이후 메인 테이블 지정
 - INNER JOIN 절 이후 메인 테이블과 조인할 테이블을 지정
 - ON 키워드 이후 조인 조건을 작성
 - 조인 조건은 메인 테이블과 조인할 테이블 간의 레코드를 일치시키는 규칙을 지정

LEFT JOIN clause : 오른쪽 테이블의 일치하는 레코드와 함께 왼쪽 테이블의 모든 레코드 반환
 - 왼쪽은 테이블의 모든 레코드를 표기
 - 오른쪽 테이블과 매칭되는 레코드가 없으면 NULL을 표시