partial=True (일부 데이터만 수정하고 싶을 때)


읽기 전용 필드(read_only_fields)
 - 데이터를 전송하는 시점에 "유효성 검사에서 제외시키고, 데이터 조회 시에는 출력" 하는 필드


역참조
comment_set <- 기존 존재

댓글 개수 <- 새로 작성해야함


!! 읽기 전용 필드 지정 이슈
 - 특정 필드를 override 혹은 추가한 경우 read_only_fields는 동작하지 않음
 - 해당 필드의 read_only 키워드 인자로 작성해야 함


API 문서화

OpenAPI Specification : RESTful API를 설명하고 시각화하는 표준화된 방법
 -> API에 대한 세부사항을 기술할 수 있는 공식 표준


OAS의 핵심 이점 - "설계 우선" 접근법
 - API를 먼저 설계하고 명세를 작성한 후, 이를 기반으로 코드를 구현하는 방식
 - API의 일관성을 유지하고, API 사용자는 더 쉽게 API를 이해하고 사용할 수 있음
 - 또한, OAS를 사용하면 API가 어떻게 작동하는지를 시각적으로 보여주는 문서를 생성할 수 있으며, 이는 API를 이해하고 테스트하는데 매우 유용
 - 이런 목적으로 사용되는 도구가 Swagger-UI 또는 ReDoc


참고

Django shortcuts functions

get_object_or_404()
 - 모델 manager objects에서 get()을 호출하지만, 해당 객체가 없을 땐 기존 DoesNotExist 예외 대신 Http404를 raise 함

get_list_or_404()
 - 모델 manager objects에서 filter()의 결과를 반환하고, 해당 객체 목록이 없을 땐 Http404를 raise 함

왜 사용해야 할까?
 - 클라이언트에게 "서버에 오류가 발생하여 요청을 수행할 수 없다(500)"라는 원인이 정확하지 않은 에러를 제공하기 보다는, 적절한 예외 처리를 통해 클라이언트에게 보다 정확한 에러 현황을 전달하는 것도 매우 중요한 개발 요소 중 하나이기 때문

!! 사용 목적에 적합하게 사용해야한다.(무작정 사용 X) ex) index에서 아무 내용도 없어도 메인 페이지가 보여야 함.