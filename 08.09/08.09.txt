스택
 - 물건을 쌓아 올리듯 자료를 쌓아 올린 형태의 자료구조

 - 스택에 저장된 자료는 선형 구조를 갖는다.
  - 선형구조 : 자료 간의 관계가 1대1의 관계를 갖는다.
  - 비선형구조 : 자료 간의 관계가  1대N의 관계를 갖는다.(ex : 트리)

 - 스택에 자료를 삽입하거나 스택에서 자료를 꺼낼 수 있다.

 - 마지막에 삽입한 자료를 가장 먼저 꺼낸다. 후입선출(LIFO)이라고 부른다.
  - 예를 들어 스택에 1, 2, 3 순으로 자료를 삽입한 후 꺼내면 역순으로 즉, 3, 2, 1 순으로 꺼낼 수 있다.


스택을 프로그램에서 구현하기 위해서 필요한 자료구조와 연산
 - 자료구조 : 자료를 선형으로 저장할 저장소
  - 배열을 사용할 수 있다.
  - 저장소 자체를 스택이라 부르기도 한다.
  - 스택에서 마지막 삽입된 원소의 위치를 top이라 부른다.

 - 연산
  - 삽입 : 저장소에 자료를 저장한다. 보통 push라고 부른다.
  - 삭제 : 저장소에서 자료를 꺼낸다. 꺼낸 자료는 삽입한 자료의 역순으로 꺼낸다. 보통 pop이라고 부른다.
  - 스택이 공백인지 아닌지를 확인하는 연산 : isEmpty
  - 스택의 top에 있는 item(원소)을 반환하는 연산 : peek


스택의 push 알고리즘
 - append 메서드를 통해 리스트의 마지막에 데이터를 삽입
	def push(item):
		s.append(item)

스택의 pop 알고리즘
	def pop():
		if len(s) == 0:
			# underflow
			return
		else:
			return s.pop()


스택 구현 고려 사항
 - 1차원 배열을 사용하여 구현할 경우 구현이 용이하다는 장점이 있지만 스택의 크기를 변경하기가 어렵다는 단점이 있다.
 - 이를 해결하기 위한 방법으로 저장소를 동적으로 할당하여 스택을 구현하는 방법이 있다. 동적 연결리스트를 이용하여 구현하는 방법을 의미한다. 구현이 복잡하다는 단점이 있지만 메모리를 효율적으로 사용한다는 장점을 가진다. 스택의 동적 구현은 생략한다.


스택의 응용1 : 괄호검사
 - 괄호의 종류 : 대괄호, 중괄호, 소괄호
 - 조건
  1. 왼쪽 괄호의 개수와 오른쪽 괄호의 개수가 같아야 한다.
  2. 같은 괄호에서 왼쪽 괄호는 오른쪽 괄호보다 먼저 나와야 한다.
  3. 괄호 사이에는 포함 관계만 존재한다.



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
stack / queue
LIFO / FIFO



2번 -> 괄호검사 응용(괄호검사만 풀줄알면 부분점수만 받음) 괄호검사보다 어려움
3번 -> 스택


메모이제이션