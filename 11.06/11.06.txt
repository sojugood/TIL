computed() : 계산된 속성을 정의하는 함수
 -> 미리 계산된 속성을 사용하여 템플릿에서 표현식을 단순하게 하고 불필요한 반복 연산을 줄임
 - 반환되는 값은 computed ref이며 일반 refs와 유사하게 계산된 결과를 .value로 참조할 수 있음(템플릿에서는 .value 생략 가능)
 - computed 속성은 의존된 반응형 데이터를 자동으로 추적
 - 의존하는 데이터가 변경될 때만 재평가


computed VS method
 - computed 속성 대신 method로도 동일한 기능을 정의할 수 있음
 - 두 가지 접근 방식은 실제로 완전히 동일

차이점
 - computed 속성은 의존된 반응형 데이터를 기반으로 캐시(cached)된다
 - 의존하는 데이터가 변경된 경우에만 재평가됨
 - 즉, 의존된 반응형 데이터가 변경되지 않는 한 이미 계산된 결과에 대한 여러 참조는 다시 평가할 필요 없이 이전에 계산된 결과를 즉시 반환
 -> 반면, method 호출은 다시 렌더링이 발생할 때마다 항상 함수를 실행

Cache(캐시)
 - 데이터나 결과를 일시적으로 저장해두는 임시 저장소
 - 이후에 같은 데이터나 결과를 다시 계산하지 않고 빠르게 접근할 수 있도록 함

computed와 method의 적절한 사용처
 computed
  - 의존하는 데이터에 따라 결과가 바뀌는 계산된 속성을 만들 때 유용
  - 동일한 의존성을 가진 여러 곳에서 사용할 때 계산 결과를 캐싱하여 중복 계산 방지

 method
  - 단순히 특정 동작을 수행하는 함수를 정의할 때 사용
  - 데이터에 의존하는지 여부와 관계없이 항상 동일한 결과를 반환하는 함수

정리
 computed : 의존된 데이터가 변경되면 자동으로 업데이트
 method : 호출해야만 실행됨
 -> 무조건 computed만 사용하는 것이 아니라 사용 목적과 상황에 맞게 computed와 method를 적절히 조합하여 사용



Conditional Rendering

v-if : 표현식 값의 T/F를 기반으로 요소를 조건부로 렌더링
 - v-if는 directive이기 때문에 단일 요소에만 연결 가능
 - 이 경우 template 요소에 v-if를 사용하여 하나 이상의 요소에 대해 적용할 수 있음(v-else, v-else-if 모두 적용 가능)

HTML<template> element
 - 페이지가 로드 될 때 렌더링 되지 않지만 JavaScript를 사용하여 나중에 문서에서 사용할 수 있도록 하는 HTML을 보유하기 위한 메커니즘
 - 보이지 않는 wrapper 역할

v-show : 표현식 값의 T/F를 기반으로 요소의 가시성을 전환
 - v-show 요소는 항상 렌더링 되어 DOM에 남아있음
 - CSS display 속성만 전환하기 때문

v-if VS v-show
 - v-if (cheap initial load, expensive toggle)
  - 초기 조건이 false인 경우 아무 작업도 수행하지 않음
  - 토글 비용이 높음

 - v-show (expensive initial load, cheap toggle)
  - 초기 조건에 관계 없이 항상 렌더링
  - 초기 렌더링 비용이 더 높음

 -> 무언가를 매우 자주 전환해야 하는 경우에는 v-show를, 실행 중에 조건이 변경되지 않는 경우에는 v-if를 권장



List Rendering

v-for : 소스 데이터를 기반으로 요소 또는 템플릿 블록을 여러 번 렌더링

 - v-for는 alias in expression 형식의 특수 구문을 사용하여 반복되는 현재 요소에 대한 별칭(alias)을 제공
 - 인덱스(객체에서는 키)에 대한 별칭을 지정할 수 있음

배열의 경우 인자 순서(위치 정해져 있음)
item, index

객체의 경우 인자 순서(위치 정해져 있음)
value, key, index

여러 요소에 대한 v-for 적용
 - template 요소에 v-for를 사용하여 하나 이상의 요소에 대해 반복 렌더링 할 수 있음
 !!template 태그는 출력되지 않음

중첩된 v-for
 - 각 v-for 범위는 상위 범위에 접근할 수 있음


v-for with key : 반드시 v-for와 key를 함께 사용한다
 - 내부 컴포넌트의 상태를 일관되게 유지
 -> 데이터의 예측 가능한 행동을 유지(Vue 내부 동작 관련)

 - key는 반드시 각 요소에 대한 고유한 값을 나타낼 수 있는 식별자여야 함


v-for with v-if : 동일 요소에 v-for와 v-if를 함께 사용하지 않는다
 - 동일한 요소에서 v-if가 v-for보다 우선순위가 더 높기 때문
 -> v-if 조건은 v-for 범위의 변수에 접근할 수 없음
 해결법
  - computed를 활용해 필터링 된 목록을 반환하여 반복하도록 설정
  - v-for와 template 요소를 사용하여 v-if를 이동



Watchers

watch() : 반응형 데이터를 감시하고, 감시하는 데이터가 변경되면 콜백 함수를 호출

!!!computed와 watch 모두 의존(감시)하는 원본 데이터를 직접 변경하지 않음


Lifecycle Hooks : Vue 인스턴스의 생애주기 동안 특정 시점에 실행되는 함수
 -> 개발자가 특정 단계에서 의도하는 로직이 실행될 수 있도록 함

