부분집합의 수
 - 집합의 원소가 n개일 때, 공집합을 포함한 부분집합의 수는 2^n개이다.
 - 이는 각 원소를 부분집합에 포함시키거나 포함시키지 않는 2가지 경우를 모든 원소에 적용한 경우의 수와 같다.


def print_subset(bit, arr, n):
	total = 0
	for i in range(n):
		if bit[i]:
			print(arr[i], end = ' ')
			total += arr[i]
	print(bit, total)


arr = [1, 2, 3, 4]
bit = [0, 0, 0, 0]
for i in range(2):
	bit[0] = i
	for j in range(2):
		bit[1] = j
		for k in range(2):
			bit[2] = k
			for i in range(2):
				bit[3] = l
				print_subset(bit, arr, 4)



<< 연산자
 - 1 << n : 2^n 즉, 원소가 n개일 경우의 모든 부분집합의 수를 의미한다.

& 연산자
 - i & (1 << j) :i의 j번째 비트가 1인지 아닌지를 검사한다.


검색
 - 순차 검색
  1. 정렬되어 있지 않은 경우
  2. 정렬되어 있는 경우


 - 이진 검색 : 자료의 가운데에 있는 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속 진행하는 방법
  * 이진 검색을 하기 위해서는 자료가 정렬된 상태여야 한다.



 - 선택 정렬 : 주어진 자료들 중 가장 작은 값의 원소부터 차례대로 선택하여 위치를 교환하는 방식
 시간 복잡도 : O(n^2)
 ! 버블 정렬과 구분 잘 하기
  정렬과정
  1. 주어진 리스트 중에서 최소값을 찾는다.
  2. 그 값을 리스트의 맨 앞에 위치한 값과 교환한다.
  3. 맨 처음 위치를 제외한 나머지 리스트를 대상으로 위의 과정을 반복한다.



셀렉션 알고리즘 : 저장되어 있는 자료로부터 k번째로 큰 혹은 작은 원소를 찾는 방법
 - 최소값, 최대값 혹은 중간값을 찾는 알고리즘을 의미하기도 한다.

 선택 과정
  - 정렬 알고리즘을 이용하여 자료 정렬하기
  - 원하는 순서에 있는 원소 가져오기














