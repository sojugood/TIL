Classes

절차지향 프로그래밍 : 프로그램을 '데이터'와 '절차'로 구성하는 방식의 프로그래밍 패러다임

 - 특징
 1. "데이터"와 해당 데이터를 처리하는 "함수(절차)"가 분리되어 있으며, 함수 호출의 흐름이 중요
 2. 코드의 순차적인 흐름과 함수 호출에 의해 프로그램이 진행

 -> 실제로 실행되는 내용이 무엇인가가 중요
 -> 데이터를 다시 재사용하거나 하기보다는 처음부터 끝까지 실행되는 결과물이 중요한 방식

 소프트웨어 위기 : 하드웨어의 발전으로 컴퓨터 계산용량과 문제의 복잡성이 급격히 증가함에 따라 소프트웨어에 발생한 충격

객체지향 프로그래밍 : '데이터'와 해당 데이터를 조작하는 '메서드'를 ''하나의 객체''로 묶어 관리하는 방식의 프로그래밍 패러다임


절차지향
 - 데이터와 해당 데이터를 처리하는 함수(절차)가 분리
 - 함수 호출의 흐름이 중요

객체지향
 - 데이터와 해당 데이터를 처리하는 메서드(메시지)를 하나의 객체(클래스)로 묶음
 - 객체 간 상호작용과 메시지 전달이 중요


클래스(Class) : 파이썬에서 타입을 표현하는 방법
 -> 객체를 생성하기 위한 설계도
 -> 데이터와 기능(메서드)을 함께 묶는 방법을 제공

객체(Object) : 클래스에서 정의한 것을 토대로 메모리에 할당된 것 / '속성'(변수)과 '행동'(메서드)으로 구성된 모든 것
 ex) 18p


클래스와 객체

 - 클래스 > 객체

 - 클래스로 만든 객체를 인스턴스 라고도 함(21p)

 - 클래스를 만든다 == 타입(ex) list)을 만든다

 '''
 name = 'Alice'
 print(type(name)) # <class 'str'>
 '''
 - 변수 name의 타입은 str클래스다.
 -> 변수 name은 str 클래스의 인스턴스이다.
 -> 우리가 사용해왔던 데이터 타입은 사실 모두 클래스였다.






객체의 특징
 - 타입 : 어떤 연산자와 조작이 가능한가?
 - 속성 : 어떤 상태(데이터)를 가지는가?
 - 조작법 : 어떤 행위(함수)를 할 수 있는가?
 - 객체 = 속성 + 기능(조작법)


클래스 구조

# 클래스 정의
class Person:
	pass

# 인스턴스 생성
iu = Person()

# 메서드 호출
iu.메서드()

# 속성(변수) 접근
iu.attribute


생성자 함수
 - 객체를 생성할 때 자동으로 호출되는 특별한 메서드
 - __init__ 이라는 이름의 메서드로 정의되며, 객체의 초기화를 담당
 - 생성자 함수를 통해 인스턴스를 생성하고 필요한 초기값을 설정

인스턴스 변수
 - 인스턴스(객체)마다 별도로 유지되는 변수
 - 인스턴스마다 독립적인 값을 가지며, 인스턴스가 생성될 때마다 초기화됨

클래스 변수
 - 클래스 내부에 선언된 변수
 - 클래스로 생성된 모든 인스턴스들이 공유하는 변수

인스턴스 메서드
 - 각각의 인스턴스에서 호출할 수 있는 메서드
 - 인스턴스 변수에 접근하고 수정하는 등의 작업을 수행


인스턴스와 클래스 간의 이름 공간
 - 클래스를 정의하면, 클래스와 해당하는 이름 공간 생성
 - 인스턴스를 만들면, 인스턴스 객체가 생성되고 '독립적인' 이름 공간 생성
 - 인스턴스에서 특정 속성에 접근하면, 인스턴스 -> 클래스 순으로 탐색


독립적인 이름공간을 가지는 이점
 - 각 인스턴스는 독립적인 메모리 공간을 가지며, 클래스와 다른 인스턴스 간에는 서로의 데잍나 상태에 직접적인 접근이 불가능
 - 객체 지향 프로그래밍의 중요한 특성 중 하나로, 클래스와 인스턴스를 모듈화하고 각각의 객체가 독립적으로 동작하도록 보장
 - 이를 통해 클래스와 인스턴스는 다른 객체들과의 상호작용에서 서로 충돌이나 영향을 주지 않으면서 독립적으로 동작할 수 있음
 -> 코드의 가독성, 유지보수성, 재사용성을 높이는데 도움을 줌


클래스 변수를 변경할 때는 항상 클래스.클래스변수 형식으로 변경


메서드 종류
 - 인스턴스 메서드
 - 클래스 메서드
 - 정적 메서드

 인스턴스 메서드 : 클래스로부터 생성된 각 인스턴스에서 호출할 수 있는 메서드
 -> 인스턴스의 상태를 조작하거나 동작을 수행
 
 인스턴스 메서드 구조
 - 클래스 내부에 정의디는 메서드의 기본
 - 반드시 첫 번째 매개변수로 인스턴스 자신(self)을 전달받음
 ! self 문구를 사용하는 것은 암묵적인 약속에 의한 것(다른 문구를 쓸 수는 있지만 쓰지 않음)


생성자 메서드 : 인스턴스 객체가 생성될 때 자동으로 호출되는 메서드 -> 인스턴스 변수들의 초기값을 설정


클래스 메서드 : 클래스가 호출하는 메서드 -> 클래스 변수를 조작하거나 클래스 레벨의 동작을 수행

클래스 메서드 구조
 - @classmethod 데코레이터를 사용하여 정의
 - 호출 시, 첫번째 인자로 호출하는 클래스(cls)가 전달됨


스태틱(정적) 메서드 : 클래스와 인스턴스와 상관없이 독립적으로 동작하는 메서드
 -> 주로 클래스와 관련이 있지만 인스턴스와 상호작용이 필요하지 않은 경우에 사용

스태틱 메서드 구조
 - @staticmethod 데코레이터를 사용하여 정의
 - 호출 시 필수적으로 작성해야 할 매개변수가 없음
 - 즉, 객체 상태나 클래스 상태를 수정할 수 없으며 단지 기능(행동)만을 위한 메서드로 사용


메서드 정리
 - 인스턴스 메서드
  1. 인스턴스의 상태를 변경한거나, 해당 인스턴스의 특정 동작을 수행

 - 클래스 메서드
  1. 인스턴스의 상태에 의존하지 않는 기능을 정의
  2. 클래스 변수를 조작하거나 클래스 레벨의 동작을 수행

 - 스태틱 메서드
  1. 클래스 및 인스턴스와 관련이 없는 일반적인 기능을 수행

각자의 역할
 - 클래스가 사용해야 할 것
  1. 클래스 메서드
  2. 스태틱 메서드

인스턴스가 사용해야 할 것
  1. 인스턴스 메서드


클래스가 할 수 있는 것
 - 클래스는 모든 메서드를 호출 할 수 있음
 ! 하지만 클래스는 클래스 메서드와 스태틱 메서드만 사용하도록 한다

인스턴스가 할 수 있는 것
 - 인스턴스는 모든 메서드를 호출 할 수 있음
 ! 하지만 인스턴스는 인스턴스 메서드만 사용하도록 한다

할 수 있다 != 써도 된다
 각자의 메서드는 OOP 패러다임에 따라 명확한 목적에 따라 설계된 것이기 때문에 클래스와 인스턴스 각각 올바른 메서드만 사용하도록 해야 한다.



`참고
매직 메서드
 - 특별한 인스턴스 메서드
 - 특정 상황에 자동으로 호출되는 메서드
 - Double underscore(__)가 있는 메서드는 특수한 동작을 위해 만들어진 메서드
  - 스페셜 메서드 혹은 매직 메서드라고 불림
 - 예시
  - __str__(self), __len__(self), 등등



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ오후 수업ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Classes

객체 : key - value 로 구성
 '속성(상태)' 과 '행동(변화)' 로 구성된 모든 것(상태와 행동의 집합)

ex) 
{
	'height' : 200,
	'dirinkMilk' : drinkMilk
}

def drinkMilk():
	height += 1


클래스 : 생성자 함수(자식을 생성하는 함수)

ex)
붕어빵1 : {
	생김새 : 붕어모양,
 	재료 : 팥
}

class 붕어빵틀():
	생김새 : 붕어모양

	def __init__(self, 재료):
		self.재료 = 재료

붕어1 = 붕어빵틀('팥')
{
	생김새 : 붕어모양,
 	재료 : 팥
}
붕어2 = 붕어빵틀('슈크림')
{
	생김새 : 붕어모양,
 	재료 : 슈크림
}


클래스에 의해 생성된 객체 == 인스턴스

스태틱 메서드 : 상태 변화에 관여하지 않음



ㅡㅡㅡㅡㅡㅡㅡㅡㅡ보충 수업ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

절차 지향 프로그래밍 : 절차를 중심으로 코딩하는 것

ex)
유저 정보 중 이름의 데이터를 성과 이름으로 구분
함수 1 -> 성 : 심, 이름 : 상익
함수 2 -> 성 : Sim, 이름 : sangik
함수 3 -> 여권 표기 방법 : 상익 심
! 함수 1을 거쳐 함수 2 or 함수 3이 실행되어야 함



객체 : 우리가 알고 있는 그 모든 개념들

1. 눈으로 볼 수 있는 것
자동차, 의자 등

2. 어떠한 행위들
수강 신청, 출석 등

3. 추상적인 것들
따듯함, 차가움 등


객체 지향 프로그래밍 : 객체를 중심으로 코딩하는 것(속성 + 행동)


클래스 변수 <-> 클래스 메서드? 알아보기
