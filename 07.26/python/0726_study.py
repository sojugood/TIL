'''
붕어빵1 : {
	생김새 : 붕어모양,
 	재료 : 팥
}

class 붕어빵틀(): # class : 생성자 함수
	생김새 : 붕어모양

	def __init__(self, 재료):
		self.재료 = 재료

붕어1 = 붕어빵틀('팥') # 붕어1 == 인스턴스
{
	생김새 : 붕어모양,
 	재료 : 팥
}
붕어2 = 붕어빵틀('슈크림') # 붕어2 == 인스턴스
{
	생김새 : 붕어모양,
 	재료 : 슈크림
}
'''

class Person:
    blood_color = 'red' # 클래스 변수

    def __init__(self, name): 
        self.name = name
	#   p.name = 'Kim'
	
    def singing(self):
        return f'{self.name}가 노래합니다.'




p = Person('Kim') # (self = p(인스턴스 변수) / name = Kim)

'''
인스턴스 메서드와 스태틱 메서드는 클래스 내에서 정의된 함수의 두 가지 주요 유형입니다. 둘 사이의 차이를 이해하려면, 먼저 메서드가 클래스의 인스턴스에 어떻게 작용하는지 이해해야 합니다.

인스턴스 메서드는 self라는 첫 번째 인자를 받습니다. 여기서 self는 메서드를 호출하는 특정 인스턴스를 참조합니다. 이를 통해 인스턴스 메서드는 해당 인스턴스의 속성에 접근하고, 필요에 따라 그 값을 변경할 수 있습니다.

반면에 스태틱 메서드는 self 인자를 받지 않으며, 인스턴스 상태를 변경하거나 인스턴스 상태에 접근하지 않습니다. 스태틱 메서드는 클래스 레벨에서 작동하므로, 인스턴스의 상태와는 독립적으로 동작합니다.

이제 singing 메서드를 살펴봅시다. singing 메서드는 self.name을 사용하여 인스턴스의 name 속성에 접근하고 있습니다. 즉, singing 메서드는 특정 인스턴스의 상태를 읽는 동작을 수행하고 있습니다. 따라서 singing 메서드는 인스턴스 메서드라고 볼 수 있습니다. 이 메서드를 호출하면, 호출하는 인스턴스의 name 속성에 따라 서로 다른 결과를 반환합니다.

인스턴스 메서드가 반드시 인스턴스의 속성을 변경해야 하는 것은 아닙니다. 속성을 읽기만 해도 인스턴스에 관련된 동작이므로 인스턴스 메서드로 분류됩니다. 위의 singing 메서드는 인스턴스의 상태를 변경하지 않지만, 인스턴스의 name 속성을 사용하므로 인스턴스 메서드입니다.
'''